// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cwrapper_symengine_ascii_art
SEXP cwrapper_symengine_ascii_art();
RcppExport SEXP _symengine_cwrapper_symengine_ascii_art() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cwrapper_symengine_ascii_art());
    return rcpp_result_gen;
END_RCPP
}
// cwrapper_symengine_version
SEXP cwrapper_symengine_version();
RcppExport SEXP _symengine_cwrapper_symengine_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cwrapper_symengine_version());
    return rcpp_result_gen;
END_RCPP
}
// cwrapper_symengine_have_component
SEXP cwrapper_symengine_have_component(SEXP s);
RcppExport SEXP _symengine_cwrapper_symengine_have_component(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(cwrapper_symengine_have_component(s));
    return rcpp_result_gen;
END_RCPP
}
// compilation_notes
SEXP compilation_notes();
RcppExport SEXP _symengine_compilation_notes() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(compilation_notes());
    return rcpp_result_gen;
END_RCPP
}
// s4basic_check
bool s4basic_check(SEXP x);
RcppExport SEXP _symengine_s4basic_check(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_check(x));
    return rcpp_result_gen;
END_RCPP
}
// s4vecbasic_check
bool s4vecbasic_check(SEXP x);
RcppExport SEXP _symengine_s4vecbasic_check(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(s4vecbasic_check(x));
    return rcpp_result_gen;
END_RCPP
}
// s4DenseMat_check
bool s4DenseMat_check(SEXP x);
RcppExport SEXP _symengine_s4DenseMat_check(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(s4DenseMat_check(x));
    return rcpp_result_gen;
END_RCPP
}
// s4basic
S4 s4basic();
RcppExport SEXP _symengine_s4basic() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(s4basic());
    return rcpp_result_gen;
END_RCPP
}
// s4vecbasic
S4 s4vecbasic();
RcppExport SEXP _symengine_s4vecbasic() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(s4vecbasic());
    return rcpp_result_gen;
END_RCPP
}
// s4DenseMat
S4 s4DenseMat();
RcppExport SEXP _symengine_s4DenseMat() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(s4DenseMat());
    return rcpp_result_gen;
END_RCPP
}
// s4basic_get_type
SEXP s4basic_get_type(SEXP robj);
RcppExport SEXP _symengine_s4basic_get_type(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_get_type(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_str
String s4basic_str(SEXP robj);
RcppExport SEXP _symengine_s4basic_str(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_str(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_hash
String s4basic_hash(SEXP robj);
RcppExport SEXP _symengine_s4basic_hash(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_hash(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_eq
bool s4basic_eq(S4 a, S4 b);
RcppExport SEXP _symengine_s4basic_eq(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type a(aSEXP);
    Rcpp::traits::input_parameter< S4 >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_eq(a, b));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_neq
bool s4basic_neq(S4 a, S4 b);
RcppExport SEXP _symengine_s4basic_neq(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type a(aSEXP);
    Rcpp::traits::input_parameter< S4 >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_neq(a, b));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_get_args
S4 s4basic_get_args(S4 s);
RcppExport SEXP _symengine_s4basic_get_args(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_get_args(s));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_free_symbols
S4 s4basic_free_symbols(S4 s);
RcppExport SEXP _symengine_s4basic_free_symbols(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_free_symbols(s));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_function_symbols
S4 s4basic_function_symbols(S4 s);
RcppExport SEXP _symengine_s4basic_function_symbols(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_function_symbols(s));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_function_getname
SEXP s4basic_function_getname(S4 s);
RcppExport SEXP _symengine_s4basic_function_getname(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_function_getname(s));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_realmpfr_get_prec
int s4basic_realmpfr_get_prec(S4 robj);
RcppExport SEXP _symengine_s4basic_realmpfr_get_prec(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_realmpfr_get_prec(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_is_Number
bool s4basic_is_Number(S4 robj);
RcppExport SEXP _symengine_s4basic_is_Number(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_is_Number(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_number_is_negative
bool s4basic_number_is_negative(RObject robj);
RcppExport SEXP _symengine_s4basic_number_is_negative(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_number_is_negative(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_number_is_positive
bool s4basic_number_is_positive(RObject robj);
RcppExport SEXP _symengine_s4basic_number_is_positive(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_number_is_positive(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_number_is_complex
bool s4basic_number_is_complex(RObject robj);
RcppExport SEXP _symengine_s4basic_number_is_complex(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_number_is_complex(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_number_is_zero
bool s4basic_number_is_zero(RObject robj);
RcppExport SEXP _symengine_s4basic_number_is_zero(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_number_is_zero(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_parse
SEXP s4basic_parse(RObject robj, bool check_whole_number);
RcppExport SEXP _symengine_s4basic_parse(SEXP robjSEXP, SEXP check_whole_numberSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type robj(robjSEXP);
    Rcpp::traits::input_parameter< bool >::type check_whole_number(check_whole_numberSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_parse(robj, check_whole_number));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_symbol
S4 s4basic_symbol(SEXP robj);
RcppExport SEXP _symengine_s4basic_symbol(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_symbol(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_const
S4 s4basic_const(CharacterVector robj);
RcppExport SEXP _symengine_s4basic_const(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_const(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_function
S4 s4basic_function(String name, SEXP args);
RcppExport SEXP _symengine_s4basic_function(SEXP nameSEXP, SEXP argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type name(nameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type args(argsSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_function(name, args));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_real
S4 s4basic_real(RObject robj, RObject prec);
RcppExport SEXP _symengine_s4basic_real(SEXP robjSEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type robj(robjSEXP);
    Rcpp::traits::input_parameter< RObject >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_real(robj, prec));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_subs
S4 s4basic_subs(SEXP expr, SEXP a, SEXP b);
RcppExport SEXP _symengine_s4basic_subs(SEXP exprSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type expr(exprSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_subs(expr, a, b));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_as_sexp
SEXP s4basic_as_sexp(S4 robj);
RcppExport SEXP _symengine_s4basic_as_sexp(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_as_sexp(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4vecbasic_get
SEXP s4vecbasic_get(RObject robj, int idx);
RcppExport SEXP _symengine_s4vecbasic_get(SEXP robjSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type robj(robjSEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(s4vecbasic_get(robj, idx));
    return rcpp_result_gen;
END_RCPP
}
// s4vecbasic_mut_append
void s4vecbasic_mut_append(S4 vec, RObject robj);
RcppExport SEXP _symengine_s4vecbasic_mut_append(SEXP vecSEXP, SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< RObject >::type robj(robjSEXP);
    s4vecbasic_mut_append(vec, robj);
    return R_NilValue;
END_RCPP
}
// s4vecbasic_mut_set
void s4vecbasic_mut_set(S4 self, int idx, S4 rval);
RcppExport SEXP _symengine_s4vecbasic_mut_set(SEXP selfSEXP, SEXP idxSEXP, SEXP rvalSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< S4 >::type rval(rvalSEXP);
    s4vecbasic_mut_set(self, idx, rval);
    return R_NilValue;
END_RCPP
}
// s4vecbasic_size
size_t s4vecbasic_size(SEXP robj);
RcppExport SEXP _symengine_s4vecbasic_size(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4vecbasic_size(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4vecbasic_unique
S4 s4vecbasic_unique(SEXP robj);
RcppExport SEXP _symengine_s4vecbasic_unique(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4vecbasic_unique(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4DenseMat_byrow
S4 s4DenseMat_byrow(RObject robj, unsigned nrow, unsigned ncol);
RcppExport SEXP _symengine_s4DenseMat_byrow(SEXP robjSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type robj(robjSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< unsigned >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(s4DenseMat_byrow(robj, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// s4DenseMat_transpose
S4 s4DenseMat_transpose(SEXP robj);
RcppExport SEXP _symengine_s4DenseMat_transpose(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4DenseMat_transpose(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4DenseMat_str
SEXP s4DenseMat_str(S4 robj);
RcppExport SEXP _symengine_s4DenseMat_str(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4DenseMat_str(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4DenseMat_copy
S4 s4DenseMat_copy(S4 robj);
RcppExport SEXP _symengine_s4DenseMat_copy(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4DenseMat_copy(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4DenseMat_dim
IntegerVector s4DenseMat_dim(SEXP robj);
RcppExport SEXP _symengine_s4DenseMat_dim(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4DenseMat_dim(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4DenseMat_get
S4 s4DenseMat_get(S4 robj, IntegerVector rows, IntegerVector cols, bool get_basic);
RcppExport SEXP _symengine_s4DenseMat_get(SEXP robjSEXP, SEXP rowsSEXP, SEXP colsSEXP, SEXP get_basicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type robj(robjSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< bool >::type get_basic(get_basicSEXP);
    rcpp_result_gen = Rcpp::wrap(s4DenseMat_get(robj, rows, cols, get_basic));
    return rcpp_result_gen;
END_RCPP
}
// s4DenseMat_mut_setbasic
void s4DenseMat_mut_setbasic(S4 rmat, int row, int col, RObject value);
RcppExport SEXP _symengine_s4DenseMat_mut_setbasic(SEXP rmatSEXP, SEXP rowSEXP, SEXP colSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type rmat(rmatSEXP);
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    Rcpp::traits::input_parameter< RObject >::type value(valueSEXP);
    s4DenseMat_mut_setbasic(rmat, row, col, value);
    return R_NilValue;
END_RCPP
}
// s4DenseMat_mut_addcols
void s4DenseMat_mut_addcols(RObject A, RObject B);
RcppExport SEXP _symengine_s4DenseMat_mut_addcols(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type A(ASEXP);
    Rcpp::traits::input_parameter< RObject >::type B(BSEXP);
    s4DenseMat_mut_addcols(A, B);
    return R_NilValue;
END_RCPP
}
// s4DenseMat_mut_addrows
void s4DenseMat_mut_addrows(RObject A, RObject B);
RcppExport SEXP _symengine_s4DenseMat_mut_addrows(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type A(ASEXP);
    Rcpp::traits::input_parameter< RObject >::type B(BSEXP);
    s4DenseMat_mut_addrows(A, B);
    return R_NilValue;
END_RCPP
}
// s4DenseMat_mul_matrix
S4 s4DenseMat_mul_matrix(RObject a, RObject b);
RcppExport SEXP _symengine_s4DenseMat_mul_matrix(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type a(aSEXP);
    Rcpp::traits::input_parameter< RObject >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(s4DenseMat_mul_matrix(a, b));
    return rcpp_result_gen;
END_RCPP
}
// s4DenseMat_det
S4 s4DenseMat_det(RObject m);
RcppExport SEXP _symengine_s4DenseMat_det(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(s4DenseMat_det(m));
    return rcpp_result_gen;
END_RCPP
}
// s4DenseMat_inv
S4 s4DenseMat_inv(RObject m);
RcppExport SEXP _symengine_s4DenseMat_inv(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(s4DenseMat_inv(m));
    return rcpp_result_gen;
END_RCPP
}
// s4DenseMat_LU_solve
S4 s4DenseMat_LU_solve(RObject a, RObject b);
RcppExport SEXP _symengine_s4DenseMat_LU_solve(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type a(aSEXP);
    Rcpp::traits::input_parameter< RObject >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(s4DenseMat_LU_solve(a, b));
    return rcpp_result_gen;
END_RCPP
}
// s4binding_size
int s4binding_size(SEXP robj);
RcppExport SEXP _symengine_s4binding_size(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4binding_size(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4binding_subset
S4 s4binding_subset(SEXP robj, IntegerVector idx, bool get_basic);
RcppExport SEXP _symengine_s4binding_subset(SEXP robjSEXP, SEXP idxSEXP, SEXP get_basicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type robj(robjSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< bool >::type get_basic(get_basicSEXP);
    rcpp_result_gen = Rcpp::wrap(s4binding_subset(robj, idx, get_basic));
    return rcpp_result_gen;
END_RCPP
}
// s4binding_parse
SEXP s4binding_parse(RObject robj);
RcppExport SEXP _symengine_s4binding_parse(SEXP robjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type robj(robjSEXP);
    rcpp_result_gen = Rcpp::wrap(s4binding_parse(robj));
    return rcpp_result_gen;
END_RCPP
}
// s4binding_op
S4 s4binding_op(SEXP robj1, SEXP robj2, const char* op_key);
RcppExport SEXP _symengine_s4binding_op(SEXP robj1SEXP, SEXP robj2SEXP, SEXP op_keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type robj1(robj1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type robj2(robj2SEXP);
    Rcpp::traits::input_parameter< const char* >::type op_key(op_keySEXP);
    rcpp_result_gen = Rcpp::wrap(s4binding_op(robj1, robj2, op_key));
    return rcpp_result_gen;
END_RCPP
}
// s4binding_math
S4 s4binding_math(SEXP robj, const char* math_key);
RcppExport SEXP _symengine_s4binding_math(SEXP robjSEXP, SEXP math_keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type robj(robjSEXP);
    Rcpp::traits::input_parameter< const char* >::type math_key(math_keySEXP);
    rcpp_result_gen = Rcpp::wrap(s4binding_math(robj, math_key));
    return rcpp_result_gen;
END_RCPP
}
// s4vecbasic_summary
S4 s4vecbasic_summary(SEXP robj, const char* summary_key);
RcppExport SEXP _symengine_s4vecbasic_summary(SEXP robjSEXP, SEXP summary_keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type robj(robjSEXP);
    Rcpp::traits::input_parameter< const char* >::type summary_key(summary_keySEXP);
    rcpp_result_gen = Rcpp::wrap(s4vecbasic_summary(robj, summary_key));
    return rcpp_result_gen;
END_RCPP
}
// s4binding_evalf
S4 s4binding_evalf(RObject expr, int bits, bool complex);
RcppExport SEXP _symengine_s4binding_evalf(SEXP exprSEXP, SEXP bitsSEXP, SEXP complexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type expr(exprSEXP);
    Rcpp::traits::input_parameter< int >::type bits(bitsSEXP);
    Rcpp::traits::input_parameter< bool >::type complex(complexSEXP);
    rcpp_result_gen = Rcpp::wrap(s4binding_evalf(expr, bits, complex));
    return rcpp_result_gen;
END_RCPP
}
// s4binding_solve_lin
S4 s4binding_solve_lin(RObject sys, RObject sym);
RcppExport SEXP _symengine_s4binding_solve_lin(SEXP sysSEXP, SEXP symSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type sys(sysSEXP);
    Rcpp::traits::input_parameter< RObject >::type sym(symSEXP);
    rcpp_result_gen = Rcpp::wrap(s4binding_solve_lin(sys, sym));
    return rcpp_result_gen;
END_RCPP
}
// s4binding_solve_poly
S4 s4binding_solve_poly(RObject f, RObject s);
RcppExport SEXP _symengine_s4binding_solve_poly(SEXP fSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type f(fSEXP);
    Rcpp::traits::input_parameter< RObject >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(s4binding_solve_poly(f, s));
    return rcpp_result_gen;
END_RCPP
}
// s4lambdavit_check
bool s4lambdavit_check(SEXP x);
RcppExport SEXP _symengine_s4lambdavit_check(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(s4lambdavit_check(x));
    return rcpp_result_gen;
END_RCPP
}
// s4llvmvit_check
bool s4llvmvit_check(SEXP x);
RcppExport SEXP _symengine_s4llvmvit_check(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(s4llvmvit_check(x));
    return rcpp_result_gen;
END_RCPP
}
// s4visitor
S4 s4visitor(RObject args, RObject exprs, bool perform_cse, int llvm_opt_level);
RcppExport SEXP _symengine_s4visitor(SEXP argsSEXP, SEXP exprsSEXP, SEXP perform_cseSEXP, SEXP llvm_opt_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type args(argsSEXP);
    Rcpp::traits::input_parameter< RObject >::type exprs(exprsSEXP);
    Rcpp::traits::input_parameter< bool >::type perform_cse(perform_cseSEXP);
    Rcpp::traits::input_parameter< int >::type llvm_opt_level(llvm_opt_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(s4visitor(args, exprs, perform_cse, llvm_opt_level));
    return rcpp_result_gen;
END_RCPP
}
// s4visitor_call
NumericVector s4visitor_call(RObject visitor, NumericVector inps, bool do_transpose);
RcppExport SEXP _symengine_s4visitor_call(SEXP visitorSEXP, SEXP inpsSEXP, SEXP do_transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type visitor(visitorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inps(inpsSEXP);
    Rcpp::traits::input_parameter< bool >::type do_transpose(do_transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(s4visitor_call(visitor, inps, do_transpose));
    return rcpp_result_gen;
END_RCPP
}
// s4basic_codegen
String s4basic_codegen(RObject robj, String type);
RcppExport SEXP _symengine_s4basic_codegen(SEXP robjSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type robj(robjSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(s4basic_codegen(robj, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_symengine_cwrapper_symengine_ascii_art", (DL_FUNC) &_symengine_cwrapper_symengine_ascii_art, 0},
    {"_symengine_cwrapper_symengine_version", (DL_FUNC) &_symengine_cwrapper_symengine_version, 0},
    {"_symengine_cwrapper_symengine_have_component", (DL_FUNC) &_symengine_cwrapper_symengine_have_component, 1},
    {"_symengine_compilation_notes", (DL_FUNC) &_symengine_compilation_notes, 0},
    {"_symengine_s4basic_check", (DL_FUNC) &_symengine_s4basic_check, 1},
    {"_symengine_s4vecbasic_check", (DL_FUNC) &_symengine_s4vecbasic_check, 1},
    {"_symengine_s4DenseMat_check", (DL_FUNC) &_symengine_s4DenseMat_check, 1},
    {"_symengine_s4basic", (DL_FUNC) &_symengine_s4basic, 0},
    {"_symengine_s4vecbasic", (DL_FUNC) &_symengine_s4vecbasic, 0},
    {"_symengine_s4DenseMat", (DL_FUNC) &_symengine_s4DenseMat, 0},
    {"_symengine_s4basic_get_type", (DL_FUNC) &_symengine_s4basic_get_type, 1},
    {"_symengine_s4basic_str", (DL_FUNC) &_symengine_s4basic_str, 1},
    {"_symengine_s4basic_hash", (DL_FUNC) &_symengine_s4basic_hash, 1},
    {"_symengine_s4basic_eq", (DL_FUNC) &_symengine_s4basic_eq, 2},
    {"_symengine_s4basic_neq", (DL_FUNC) &_symengine_s4basic_neq, 2},
    {"_symengine_s4basic_get_args", (DL_FUNC) &_symengine_s4basic_get_args, 1},
    {"_symengine_s4basic_free_symbols", (DL_FUNC) &_symengine_s4basic_free_symbols, 1},
    {"_symengine_s4basic_function_symbols", (DL_FUNC) &_symengine_s4basic_function_symbols, 1},
    {"_symengine_s4basic_function_getname", (DL_FUNC) &_symengine_s4basic_function_getname, 1},
    {"_symengine_s4basic_realmpfr_get_prec", (DL_FUNC) &_symengine_s4basic_realmpfr_get_prec, 1},
    {"_symengine_s4basic_is_Number", (DL_FUNC) &_symengine_s4basic_is_Number, 1},
    {"_symengine_s4basic_number_is_negative", (DL_FUNC) &_symengine_s4basic_number_is_negative, 1},
    {"_symengine_s4basic_number_is_positive", (DL_FUNC) &_symengine_s4basic_number_is_positive, 1},
    {"_symengine_s4basic_number_is_complex", (DL_FUNC) &_symengine_s4basic_number_is_complex, 1},
    {"_symengine_s4basic_number_is_zero", (DL_FUNC) &_symengine_s4basic_number_is_zero, 1},
    {"_symengine_s4basic_parse", (DL_FUNC) &_symengine_s4basic_parse, 2},
    {"_symengine_s4basic_symbol", (DL_FUNC) &_symengine_s4basic_symbol, 1},
    {"_symengine_s4basic_const", (DL_FUNC) &_symengine_s4basic_const, 1},
    {"_symengine_s4basic_function", (DL_FUNC) &_symengine_s4basic_function, 2},
    {"_symengine_s4basic_real", (DL_FUNC) &_symengine_s4basic_real, 2},
    {"_symengine_s4basic_subs", (DL_FUNC) &_symengine_s4basic_subs, 3},
    {"_symengine_s4basic_as_sexp", (DL_FUNC) &_symengine_s4basic_as_sexp, 1},
    {"_symengine_s4vecbasic_get", (DL_FUNC) &_symengine_s4vecbasic_get, 2},
    {"_symengine_s4vecbasic_mut_append", (DL_FUNC) &_symengine_s4vecbasic_mut_append, 2},
    {"_symengine_s4vecbasic_mut_set", (DL_FUNC) &_symengine_s4vecbasic_mut_set, 3},
    {"_symengine_s4vecbasic_size", (DL_FUNC) &_symengine_s4vecbasic_size, 1},
    {"_symengine_s4vecbasic_unique", (DL_FUNC) &_symengine_s4vecbasic_unique, 1},
    {"_symengine_s4DenseMat_byrow", (DL_FUNC) &_symengine_s4DenseMat_byrow, 3},
    {"_symengine_s4DenseMat_transpose", (DL_FUNC) &_symengine_s4DenseMat_transpose, 1},
    {"_symengine_s4DenseMat_str", (DL_FUNC) &_symengine_s4DenseMat_str, 1},
    {"_symengine_s4DenseMat_copy", (DL_FUNC) &_symengine_s4DenseMat_copy, 1},
    {"_symengine_s4DenseMat_dim", (DL_FUNC) &_symengine_s4DenseMat_dim, 1},
    {"_symengine_s4DenseMat_get", (DL_FUNC) &_symengine_s4DenseMat_get, 4},
    {"_symengine_s4DenseMat_mut_setbasic", (DL_FUNC) &_symengine_s4DenseMat_mut_setbasic, 4},
    {"_symengine_s4DenseMat_mut_addcols", (DL_FUNC) &_symengine_s4DenseMat_mut_addcols, 2},
    {"_symengine_s4DenseMat_mut_addrows", (DL_FUNC) &_symengine_s4DenseMat_mut_addrows, 2},
    {"_symengine_s4DenseMat_mul_matrix", (DL_FUNC) &_symengine_s4DenseMat_mul_matrix, 2},
    {"_symengine_s4DenseMat_det", (DL_FUNC) &_symengine_s4DenseMat_det, 1},
    {"_symengine_s4DenseMat_inv", (DL_FUNC) &_symengine_s4DenseMat_inv, 1},
    {"_symengine_s4DenseMat_LU_solve", (DL_FUNC) &_symengine_s4DenseMat_LU_solve, 2},
    {"_symengine_s4binding_size", (DL_FUNC) &_symengine_s4binding_size, 1},
    {"_symengine_s4binding_subset", (DL_FUNC) &_symengine_s4binding_subset, 3},
    {"_symengine_s4binding_parse", (DL_FUNC) &_symengine_s4binding_parse, 1},
    {"_symengine_s4binding_op", (DL_FUNC) &_symengine_s4binding_op, 3},
    {"_symengine_s4binding_math", (DL_FUNC) &_symengine_s4binding_math, 2},
    {"_symengine_s4vecbasic_summary", (DL_FUNC) &_symengine_s4vecbasic_summary, 2},
    {"_symengine_s4binding_evalf", (DL_FUNC) &_symengine_s4binding_evalf, 3},
    {"_symengine_s4binding_solve_lin", (DL_FUNC) &_symengine_s4binding_solve_lin, 2},
    {"_symengine_s4binding_solve_poly", (DL_FUNC) &_symengine_s4binding_solve_poly, 2},
    {"_symengine_s4lambdavit_check", (DL_FUNC) &_symengine_s4lambdavit_check, 1},
    {"_symengine_s4llvmvit_check", (DL_FUNC) &_symengine_s4llvmvit_check, 1},
    {"_symengine_s4visitor", (DL_FUNC) &_symengine_s4visitor, 4},
    {"_symengine_s4visitor_call", (DL_FUNC) &_symengine_s4visitor_call, 3},
    {"_symengine_s4basic_codegen", (DL_FUNC) &_symengine_s4basic_codegen, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_symengine(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
